opentips/cli/main.py:20 - Error Handling - Intermediate Consider using a context manager with `os.chdir()` to change the working directory temporarily. This ensures that the original working directory is restored even if an exception occurs. You can create a custom context manager or use the `contextlib.chdir()` function available in Python 3.11+.
opentips/cli/rpc_server.py:1 - Type Hinting - Beginner Make use of the `TypeAlias` from the `typing` module to create a clear alias for the `Result` type. This improves code readability and maintainability. For example: `from typing import TypeAlias; Result: TypeAlias = Success | Error`
opentips/llm/llm_tips.py:16 - String Formatting - Beginner Consider using an f-string for the `__str__` method of the `Tip` class. F-strings are more readable and efficient than the older `.format()` method. For example: `return f"{self.file}:{self.line} - {self.type} - {self.complexity} {self.description}"`
opentips/cli/main.py:62 - Asynchronous Programming - Intermediate Consider using `asyncio.create_task()` to run the RPC server concurrently with other operations. This allows for better resource utilization and responsiveness in your application. For example: `asyncio.create_task(do_run_rpc())` instead of `await do_run_rpc()`.
opentips/cli/rpc_server.py:74 - Type Checking - Intermediate Instead of using `isinstance()` for type checking, consider using `typing.cast()` to assert the type to the type checker without a runtime check. This can improve performance and make your intentions clearer to the type checker. For example: `server = typing.cast(asyncio.Server, site._server)`
opentips/tips/fetch_tips.py:39 - File Operations - Beginner Use a context manager (`with` statement) when opening files. This ensures that the file is properly closed after you're done with it, even if an exception occurs. For example: `with open('.opentips/ignore.txt') as f: notips = f.read().splitlines()
opentips/llm/llm_tips.py:66 - String Manipulation - Beginner Instead of using string concatenation with '\n'.join(notips), consider using an f-string with a multi-line string for better readability. 
opentips/llm/llm_tips.py:51 - Code Organization - Intermediate Consider moving the 'notip_instructions' string template outside of the if statement and use it as a constant. This separates the template definition from its usage, improving code organization and reusability.
opentips/llm/llm_tips.py:55 - String Formatting - Beginner Consider using an f-string for the `notip_instructions` template. F-strings are more readable and efficient than traditional string formatting methods. For example: `notip_instructions = f"""The user has indicated that they do not want any of the following tips. Avoid\nproviding tips that are the same as, or almost the same as, the following:\n\n<notips>\n{notips_str}\n</notips>\n"""`
opentips/llm/llm_tips.py:55 - Code Organization - Intermediate Consider defining the `notip_instructions` template outside the `if` block as a constant. This improves code organization and reduces the cognitive load when reading the function. You can then use this constant inside the `if` block, potentially with an f-string for dynamic content.
